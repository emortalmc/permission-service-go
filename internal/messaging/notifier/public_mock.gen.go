// Code generated by MockGen. DO NOT EDIT.
// Source: internal/notifier/public.go

// Package notifier is a generated GoMock package.
package notifier

import (
	context "context"
	model "permission-service/internal/repository/model"
	reflect "reflect"

	permission "github.com/emortalmc/proto-specs/gen/go/message/permission"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// PlayerRolesUpdate mocks base method.
func (m *MockNotifier) PlayerRolesUpdate(ctx context.Context, playerId, roleId string, changeType permission.PlayerRolesUpdateMessage_ChangeType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerRolesUpdate", ctx, playerId, roleId, changeType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlayerRolesUpdate indicates an expected call of PlayerRolesUpdate.
func (mr *MockNotifierMockRecorder) PlayerRolesUpdate(ctx, playerId, roleId, changeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerRolesUpdate", reflect.TypeOf((*MockNotifier)(nil).PlayerRolesUpdate), ctx, playerId, roleId, changeType)
}

// RoleUpdate mocks base method.
func (m *MockNotifier) RoleUpdate(ctx context.Context, role *model.Role, changeType permission.RoleUpdateMessage_ChangeType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdate", ctx, role, changeType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleUpdate indicates an expected call of RoleUpdate.
func (mr *MockNotifierMockRecorder) RoleUpdate(ctx, role, changeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdate", reflect.TypeOf((*MockNotifier)(nil).RoleUpdate), ctx, role, changeType)
}
